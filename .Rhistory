'marital_values',
'anxiety',
'relationship_mother'), 2, normalize])
apply(df[,c(
'age',
'nettoink_f_2020',
'gender_values',
'marital_values',
'anxiety',
'relationship_mother'), 2, FUN=normalize])
#normalize for neural network
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
apply(df[,c(
'age',
'nettoink_f_2020',
'gender_values',
'marital_values',
'anxiety',
'relationship_mother'), 2, normalize])
apply(df[,c(
'age',
'nettoink_f_2020',
'gender_values',
'marital_values',
'anxiety',
'relationship_mother'), 2, function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}])
?apply
apply(df[,c(
'age',
'nettoink_f_2020',
'gender_values',
'marital_values',
'anxiety',
'relationship_mother')], 2, function(x) {
return ((x - min(x)) / (max(x) - min(x)))
})
df$anxiety <- factor.scores(df[,c("ch20m011", "ch20m012", "ch20m013", "ch20m014")], fa_3, missing = T, impute=T)$scores
apply(df[,c(
'age',
'nettoink_f_2020',
'gender_values',
'marital_values',
'anxiety',
'relationship_mother')], 2, function(x) {
return ((x - min(x)) / (max(x) - min(x)))
})
vars = c(
'age',
'nettoink_f_2020',
'gender_values',
'marital_values',
'anxiety',
'relationship_mother')
df[,vars] <- apply(df[,vars], 2, function(x) {
return ((x - min(x)) / (max(x) - min(x)))
})
#select variables
keepcols = c('nomem_encr',
'gender_bg',
'age',
'edu',
'migration_background_bg',
'relationship_status',
'number_of_children',
'child_under_5',
'relationship_satisfaction',
'student',
'employed',
'self_employed',
'nettoink_f_2020',
'future_children',
'church_attendence',
'pray',
'gender_values',
'marital_values',
'anxiety',
'chronic_illness',
'relationship_mother')
model = neuralnet(new_child ~ gender_bg + age + age^2 + edu + migration_background_bg + nettoink_f_2020 +
relationship_status + number_of_children + child_under_5 + relationship_satisfaction + #family status
student + employed + self_employed +  #employment status
future_children + #family plans
church_attendence + pray + gender_values + marital_values +
chronic_illness + relationship_mother,
data=df,
hidden = 5,
stepmax = 1e+05,
rep = 2,
lifesign = "full",
algorithm = "rprop+",
err.fct = "ce",
linear.output = F)
install.packages("neuralnet")
library(neuralnet)
model = neuralnet(new_child ~ gender_bg + age + age^2 + edu + migration_background_bg + nettoink_f_2020 +
relationship_status + number_of_children + child_under_5 + relationship_satisfaction + #family status
student + employed + self_employed +  #employment status
future_children + #family plans
church_attendence + pray + gender_values + marital_values +
chronic_illness + relationship_mother,
data=df,
hidden = 5,
stepmax = 1e+05,
rep = 2,
lifesign = "full",
algorithm = "rprop+",
err.fct = "ce",
linear.output = F)
y <- read.csv("PreFer_train_outcome.csv")
df <- merge(df, y, by = "nomem_encr")
#select variables
keepcols = c('nomem_encr',
'gender_bg',
'age',
'edu',
'migration_background_bg',
'relationship_status',
'number_of_children',
'child_under_5',
'relationship_satisfaction',
'student',
'employed',
'self_employed',
'nettoink_f_2020',
'future_children',
'church_attendence',
'pray',
'gender_values',
'marital_values',
'anxiety',
'chronic_illness',
'relationship_mother')
## Keeping data with variables selected
df <- df[ , keepcols ]
df <- merge(df, y, by = "nomem_encr")
missings_count <- list()
for (i in 1:ncol(df)){missings_count[[i]] <- sum(is.na(df[,i]))}
cbind(colnames(df), unlist(missings_count))
model = neuralnet(new_child ~ gender_bg + age + age^2 + edu + migration_background_bg + nettoink_f_2020 +
relationship_status + number_of_children + child_under_5 + relationship_satisfaction + #family status
student + employed + self_employed +  #employment status
future_children + #family plans
church_attendence + pray + gender_values + marital_values +
chronic_illness + relationship_mother,
data=df,
hidden = 5,
stepmax = 1e+05,
rep = 2,
lifesign = "full",
algorithm = "rprop+",
err.fct = "ce",
linear.output = F)
apply(df, 2, head)
as.numeric(df$edu[1:10])
apply(df, 2, as.numeric)
as.numeric(df$edu)
apply(df, 2, head)
table(dfmigration_background_bg)
table(df$migration_background_bg)
factor(df$migration_background_bg, levels = 1:6)
table(df$migration_background_bg)
#etnicity
df$migration_background_bg[df$migration_background_bg==0] <- 1
df$migration_background_bg[df$migration_background_bg==101] <- 2
df$migration_background_bg[df$migration_background_bg==102] <- 3
df$migration_background_bg[df$migration_background_bg==201] <- 4
df$migration_background_bg[df$migration_background_bg==202] <- 5
df$migration_background_bg[is.na(df$migration_background_bg)] <- 6
df$migration_background_bg[df$migration_background_bg=="unknown"] <- 6
df$migration_background_bg <- factor(df$migration_background_bg)
levels(df$migration_background_bg)
type(df$migration_background_bg)
str(df$migration_background_bg)
setwd("G:/My Drive/post-phd/PreFer/data/training_data")
df <- read.csv("PreFer_train_data.csv")
y <- read.csv("PreFer_train_outcome.csv")
as.factor(df$migration_background_bg)
df$migration_background_bg
df$migration_background_bg[df$migration_background_bg==0] <- 1
df$migration_background_bg[df$migration_background_bg==101] <- 2
df$migration_background_bg[df$migration_background_bg==102] <- 3
df$migration_background_bg[df$migration_background_bg==201] <- 4
df$migration_background_bg[df$migration_background_bg==202] <- 5
df$migration_background_bg[is.na(df$migration_background_bg)] <- 6
as.factor(df$migration_background_bg)
df$migration_background_bg <- as.factor(df$migration_background_bg)
#delete respondents with missing outcome
df = df[df$outcome_available==1,]
gc()
# predictors 2020
# individual characteristics
#gender
table(df$gender_bg, useNA= 'ifany')
#age
df$age = 2024 - df$birthyear_bg
#educational level
df$edu <- "unknown"
df$edu[df$cw20m005<=11] <- "vmbo"
df$edu[df$cw20m005>11 & df$cw20m005<=15] <- "havo-vwo"
df$edu[df$cw20m005>15 & df$cw20m005<= 17] <- "mbo"
df$edu[df$cw20m005>17 & df$cw20m005<= 24] <- "bachelor"
df$edu[df$cw20m005>24] <- "master"
df$edu <- as.factor(df$edu)
#etnicity
df$migration_background_bg[df$migration_background_bg==0] <- 1
df$migration_background_bg[df$migration_background_bg==101] <- 2
df$migration_background_bg[df$migration_background_bg==102] <- 3
df$migration_background_bg[df$migration_background_bg==201] <- 4
df$migration_background_bg[df$migration_background_bg==202] <- 5
df$migration_background_bg[is.na(df$migration_background_bg)] <- 6
str(df$migration_background_bg)
#relationship status
df$cf20m024[is.na(df$cf20m024)] <- 2
df$cf20m025[is.na(df$cf20m025)] <- 2
df$cf20m030[is.na(df$cf20m030)] <- 2
df$relationship_status = NA
df$relationship_status[df$cf20m024 == 2] <- "no_partner"
df$relationship_status[df$cf20m024 == 1] <- "live_apart"
df$relationship_status[df$cf20m025 == 1] <- "cohabit"
df$relationship_status[df$cf20m030 == 1 | df$burgstat_2020 == 1] <- "married"
df$relationship_status <- as.factor(df$relationship_status)
as.numeric(df$relationship_status)
#number of children
df$cf20m455[is.na(df$cf20m455)] <- 0
df$cf20m455[df$cf20m455>=3] <- '3+'
df$number_of_children <- as.factor(df$cf20m455)
as.numeric(df$cf20m455)
df$cf20m455
df$cf20m455[is.na(df$cf20m455)] <- 0
df$cf20m455[df$cf20m455>=3] <- 3
df$number_of_children <- as.factor(df$cf20m455)
as.numeric(df$cf20m455)
#age youngest child
vars <- c("cf20m456", "cf20m457", "cf20m458", "cf20m459", "cf20m460", "cf20m461", "cf20m462")
df$age_youngest_child <- NA
for (i in 1:length(vars)){
df$age_youngest_child[!is.na(df[vars[i]])] <- 2024 - df[vars[i]][!is.na(df[vars[i]])]
}
df$child_under_5 <- as.numeric(df$age_youngest_child<=5)
df$child_under_5[is.na(df$child_under_5)] <- 0
df$relationship_satisfaction <- NA
df$relationship_satisfaction[df$cf20m180<=5] <- "onvoldoende"
df$relationship_satisfaction[df$cf20m180>5 & df$cf20m180<=7] <- "voldoende"
df$relationship_satisfaction[df$cf20m180>7 ] <- "goed"
df$relationship_satisfaction[is.na(df$cf20m180)] <- "no partner"
df$relationship_satisfaction <- as.factor(df$relationship_satisfaction)
as.numeric(df$relationship_satisfaction)
#employement status
df$student = as.numeric(df$belbezig_2020==7)
df$student[is.na(df$student)] <- 0
df$self_employed = as.numeric(df$belbezig_2020 == 3)
df$self_employed[is.na(df$self_employed)] <- 0
df$employed = as.numeric(df$belbezig_2020 %in% 1:2)
#household income
df$nettoink_f_2020[is.na(df$nettoink_f_2020)] <- mean(df$nettoink_f_2020, na.rm=T)
#fertility intentions
df$future_children <- "no"
df$future_children[df$cf20m128==3] <- "dont know"
df$future_children[df$cf20m130<=1] <- "next year"
df$future_children[df$cf20m130>1 & df$cf20m130<=5] <- "next 5 years"
df$future_children[df$cf20m130>5] <- "more than 5 years"
df$future_children <- factor(df$future_children, levels=c("no", "next year", "next 5 years", "more than 5 years", "dont know"))
df$future_children
as.numeric(df$future_children)
df$cr20m041[is.na(df$cr20m041)] <- "unknown"
df$church_attendence <- as.factor(df$cr20m041)
as.numeric(df$cr20m041)
df$cr20m041[df$cr20m041=='unknown'] <- 7
as.numeric(df$cr20m041)
df$cr20m042
df$cr20m042[is.na(df$cr20m042)] <- 7
df$pray <- as.factor(df$cr20m042)
fa_1 = fa(df[,c("cv20l151", "cv20l152", "cv20l153", "cv20l154")])
df$gender_values <- factor.scores(df[,c("cv20l151", "cv20l152", "cv20l153", "cv20l154")], fa_1, missing = T, impute=T)$scores
# marital values
df$cv20l126 = 6 - df$cv20l126
df$cv20l127 = 6 - df$cv20l127
df$cv20l128 = 6 - df$cv20l128
df$cv20l129 = 6 - df$cv20l129
df$cv20l130 = 6 - df$cv20l130
fa_2 = fa(df[,c("cv20l124", "cv20l125", "cv20l126", "cv20l127", "cv20l128", "cv20l129", "cv20l130")])
df$marital_values <- factor.scores(df[,c("cv20l124", "cv20l125", "cv20l126", "cv20l127", "cv20l128", "cv20l129", "cv20l130")], fa_2, missing = T, impute=T)$scores
#health
#anxiety
df$ch20m013 = 7 - df$ch20m013
fa_3 <- fa(df[,c("ch20m011", "ch20m012", "ch20m013", "ch20m014")])
df$anxiety <- factor.scores(df[,c("ch20m011", "ch20m012", "ch20m013", "ch20m014")], fa_3, missing = T, impute=T)$scores
df$ch20m018
#chronic illness
df$ch20m018 = abs(df$ch20m018 - 2 )
df$ch20m018[is.na(df$ch20m018)] <- 3
df$chronic_illness <- as.factor(df$ch20m018)
#relationship mother
df$cf20m506 = 8 - df$cf20m506
df$cf20m507 = 8 - df$cf20m507
df$cf20m509 = 8 - df$cf20m509
df$cf20m510 = 8 - df$cf20m510
df$cf20m511 = 8 - df$cf20m511
df$cf20m512 = 8 - df$cf20m512
fa_4 <- fa(df[,c("cf20m504", "cf20m505", "cf20m506", "cf20m507", "cf20m508", "cf20m510", "cf20m511", "cf20m512")])
df$relationship_mother <- factor.scores(df[,c("cf20m504", "cf20m505", "cf20m506", "cf20m507", "cf20m508", "cf20m510", "cf20m511", "cf20m512")], fa_4, missing = T, impute = T)$scores
#normalize continuous vars for neural network
vars = c(
'age',
'nettoink_f_2020',
'gender_values',
'marital_values',
'anxiety',
'relationship_mother')
df[,vars] <- apply(df[,vars], 2, function(x) {
return ((x - min(x)) / (max(x) - min(x)))
})
#select variables
keepcols = c('nomem_encr',
'gender_bg',
'age',
'edu',
'migration_background_bg',
'relationship_status',
'number_of_children',
'child_under_5',
'relationship_satisfaction',
'student',
'employed',
'self_employed',
'nettoink_f_2020',
'future_children',
'church_attendence',
'pray',
'gender_values',
'marital_values',
'anxiety',
'chronic_illness',
'relationship_mother')
## Keeping data with variables selected
df <- df[ , keepcols ]
apply(df, 2, function(x){as.numeric(x)})
as.numeric(df$edu)
for (j in 1:ncol(df)){
as.numeric(df[,j])
}
for (j in 1:ncol(df)){
print(as.numeric(df[,j]))
}
for (j in 1:ncol(df)){
df[,j] <- as.numeric(df[,j])
}
model = neuralnet(new_child ~ gender_bg + age + age^2 + edu + migration_background_bg + nettoink_f_2020 +
relationship_status + number_of_children + child_under_5 + relationship_satisfaction + #family status
student + employed + self_employed +  #employment status
future_children + #family plans
church_attendence + pray + gender_values + marital_values +
chronic_illness + relationship_mother,
data=df,
hidden = 5,
stepmax = 1e+05,
rep = 2,
lifesign = "full",
algorithm = "rprop+",
err.fct = "ce",
linear.output = F)
df <- merge(df, y, by = "nomem_encr")
model = neuralnet(new_child ~ gender_bg + age + age^2 + edu + migration_background_bg + nettoink_f_2020 +
relationship_status + number_of_children + child_under_5 + relationship_satisfaction + #family status
student + employed + self_employed +  #employment status
future_children + #family plans
church_attendence + pray + gender_values + marital_values +
chronic_illness + relationship_mother,
data=df,
hidden = 5,
stepmax = 1e+05,
rep = 2,
lifesign = "full",
algorithm = "rprop+",
err.fct = "ce",
linear.output = F)
?neurralnet
?neuralnet
model
summary(model)
table(df$new_child, model$response)
compute(model, rep = 1, df[, -1])
compute(model, rep = 1, df[, !colnames(df) %in% c("nomem_encr", "new_child")])
#factors to numeric
for (j in 1:ncol(df)){
df[,j] <- as.numeric(df[,j])
}
compute(model, rep = 1, df[, !colnames(df) %in% c("nomem_encr", "new_child")])
str(df)
compute(model, rep = 2, df[, !colnames(df) %in% c("nomem_encr", "new_child")])
model$result.matrix
model = neuralnet(new_child ~ gender_bg + age + age^2 + edu + migration_background_bg + nettoink_f_2020 +
relationship_status + number_of_children + child_under_5 + relationship_satisfaction + #family status
student + employed + self_employed +  #employment status
future_children + #family plans
church_attendence + pray + gender_values + marital_values +
chronic_illness + relationship_mother,
data=df,
hidden = 5,
stepmax = 1e+08,
rep = 1,
lifesign = "full",
algorithm = "rprop+",
err.fct = "ce",
linear.output = F)
y_hat <- compute(model, rep = 2, df[, !colnames(df) %in% c("nomem_encr", "new_child")])
y_hat <- compute(model, rep = 1, df[, !colnames(df) %in% c("nomem_encr", "new_child")])
y_hat <- compute(model, rep = 1, df[, !colnames(df) %in% c("nomem_encr", "new_child")])$net.result
y_hat
ifelse(y_hat >.5, 1, 0)
str(model)
?compute
#evaluate
y_hat <- predict(model, rep = 1, df[, !colnames(df) %in% c("nomem_encr", "new_child")])$net.result
#evaluate
y_hat <- predict(model, rep = 1, df[, !colnames(df) %in% c("nomem_encr", "new_child")])
y_hat
y_hat <- ifelse(y_hat >.5, 1, 0)
y_hat
table(df$new_child, y_hat)
summary(model)
round(sum(confusion_matrix$freq[confusion_matrix$type %in% c("true negative", "true positive")])/sum(confusion_matrix$freq),4)
confusion_matrix <- table(df$new_child, y_hat)
confusion_matrix = as.data.frame(confusion_matrix)
colnames(confusion_matrix) <- c("observed", "expected", "freq")
confusion_matrix$type = c("true negative", "false negative", "false positive", "true positive")
round(sum(confusion_matrix$freq[confusion_matrix$type %in% c("true negative", "true positive")])/sum(confusion_matrix$freq),4)
#precision / noise / false positive rate
#of all predicted true, how many are true positives? i.e. what % is noise?
round(confusion_matrix$freq[confusion_matrix$type=="true positive"]/sum(confusion_matrix$freq[confusion_matrix$type %in% c("false positive", "true positive")]),4)
#recall / detection power / false negative rate
#of all actual positives, how many are true positives? i.e. what % is missed?
#tp/(tp+fn)
round(confusion_matrix$freq[confusion_matrix$type=="true positive"]/sum(confusion_matrix$freq[confusion_matrix$type %in% c("false negative", "true positive")]),4)
library(lmtest)
library(neuralnet)
setwd("G:/My Drive/post-phd/PreFer/data/training_data")
df <- read.csv("PreFer_train_data.csv")
y <- read.csv("PreFer_train_outcome.csv")
setwd('G:/My Drive/post-phd/PreFer/fertility-prediction-challenge')
source("submission.R")
df = clean_df(df)
df <- merge(df, y, by = "nomem_encr")
m0 <- glm(new_child~1, data = df, family = 'binomial')
model <- glm(new_child ~ gender_bg + age + age^2 + edu + migration_background_bg + nettoink_f_2020 +
relationship_status + number_of_children + child_under_5 + relationship_satisfaction + #family status
student + employed + self_employed +  #employment status
future_children + #family plans
church_attendence + pray + gender_values + marital_values +
chronic_illness + relationship_mother , data = df, family = 'binomial')
summary(model)
table(df$new_child, model$predicted)
y_hat <- predict(model, dfdf[, !colnames(df) %in% c("nomem_encr", "new_child")])
y_hat <- predict(model, df[, !colnames(df) %in% c("nomem_encr", "new_child")])
y_hat
y_hat <- ifelse(y_hat >.5, 1, 0)
confusion_matrix <- table(df$new_child, y_hat)
confusion_matrix = as.data.frame(confusion_matrix)
colnames(confusion_matrix) <- c("observed", "expected", "freq")
confusion_matrix$type = c("true negative", "false negative", "false positive", "true positive")
round(sum(confusion_matrix$freq[confusion_matrix$type %in% c("true negative", "true positive")])/sum(confusion_matrix$freq),4)
#precision / noise / false positive rate
round(confusion_matrix$freq[confusion_matrix$type=="true positive"]/sum(confusion_matrix$freq[confusion_matrix$type %in% c("false positive", "true positive")]),4)
#recall /detection / true positive rate
round(confusion_matrix$freq[confusion_matrix$type=="true positive"]/sum(confusion_matrix$freq[confusion_matrix$type %in% c("false negative", "true positive")]),4)
#neural network
#factors to numeric
for (j in 1:ncol(df)){
df[,j] <- as.numeric(df[,j])
}
#normalize continuous vars
vars = c(
'age',
'nettoink_f_2020',
'gender_values',
'marital_values',
'anxiety',
'relationship_mother')
df[,vars] <- apply(df[,vars], 2, function(x) {
return ((x - min(x)) / (max(x) - min(x)))
})
model = neuralnet(new_child ~ gender_bg + age + age^2 + edu + migration_background_bg + nettoink_f_2020 +
relationship_status + number_of_children + child_under_5 + relationship_satisfaction + #family status
student + employed + self_employed +  #employment status
future_children + #family plans
church_attendence + pray + gender_values + marital_values +
chronic_illness + relationship_mother,
data=df,
hidden = 5,
stepmax = 1e+08,
rep = 1,
lifesign = "full",
algorithm = "rprop+",
err.fct = "ce",
linear.output = F)
#evaluate
y_hat <- predict(model, df[, !colnames(df) %in% c("nomem_encr", "new_child")])
y_hat <- ifelse(y_hat >.5, 1, 0)
confusion_matrix <- table(df$new_child, y_hat)
confusion_matrix = as.data.frame(confusion_matrix)
colnames(confusion_matrix) <- c("observed", "expected", "freq")
confusion_matrix$type = c("true negative", "false negative", "false positive", "true positive")
round(sum(confusion_matrix$freq[confusion_matrix$type %in% c("true negative", "true positive")])/sum(confusion_matrix$freq),4)
#precision / noise / false positive rate
round(confusion_matrix$freq[confusion_matrix$type=="true positive"]/sum(confusion_matrix$freq[confusion_matrix$type %in% c("false positive", "true positive")]),4)
#recall /detection / true positive rate
round(confusion_matrix$freq[confusion_matrix$type=="true positive"]/sum(confusion_matrix$freq[confusion_matrix$type %in% c("false negative", "true positive")]),4)
confusion_matrix
